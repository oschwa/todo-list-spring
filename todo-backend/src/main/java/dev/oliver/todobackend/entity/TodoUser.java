package dev.oliver.todobackend.entity;import jakarta.persistence.*;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.util.Collection;import java.util.Collections;//TODO: Fix Lombok for getter/setter features, etc.@Entity@Table(name="todo_account")public class TodoUser implements UserDetails {    @Id    private Long id;    private String userName;    private String password;    private String email;    private TodoUserRole role;    private Boolean locked;    private Boolean enabled;    public TodoUser() {}    public TodoUser(String userName, String password, String email,                    TodoUserRole role, Boolean locked, Boolean enabled) {        this.userName = userName;        this.password = password;        this.email = email;        this.role = role;        this.locked = locked;        this.enabled = enabled;    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        SimpleGrantedAuthority simpleGrantedAuthority =                new SimpleGrantedAuthority(role.name());        return Collections.singletonList(simpleGrantedAuthority);    }    public void setPassword(String password) {        this.password = password;    }    @Override    public String getPassword() {        return this.password;    }    public void setUserName(String userName) {        this.userName = userName;    }    @Override    public String getUsername() {        return this.userName;    }    public void setEmail(String email) {        this.email = email;    }    public String getEmail() {        return this.email;    }    public void setId(Long id) {        this.id = id;    }    public Long getId() {        return this.id;    }    @Override    public boolean isAccountNonExpired() {        return UserDetails.super.isAccountNonExpired();    }    @Override    public boolean isAccountNonLocked() {        return UserDetails.super.isAccountNonLocked();    }    @Override    public boolean isCredentialsNonExpired() {        return UserDetails.super.isCredentialsNonExpired();    }    @Override    public boolean isEnabled() {        return UserDetails.super.isEnabled();    }}